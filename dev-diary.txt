9/12

got claude set up
got dev container running after a lot of back and forth
and more and more tweaks. but now i think it's good

my goodness, is it time to actually get started?

no :)
i'm forwarding 21 ports atm, they're accumulating more and more
ok fixed

ok let's get started i guess!

DONE add "even better toml" extension

tried to add a lint-on-edit hook but couldn't get it working, maybe someday - TODO

added pyright

added 100% coverage hook

update original plan to reflect progress from initial_implemenation_plan?
or don't, and just use both of those files when making the next plan?

TODO be sure to pick up the "future enhancement needed" note in commit 4 of initial_implementation_plan

TODO next up should be updating this to run on a _directory_ rather than a single file

DONE verify that we're treating self and cls correctly (they count as annotated)

DONE have a subagent for specifically dealing with linting / type-checking issues?

DONE update claude.md to talk about workspace/demo_files dir

DONE have a slash command for critically analyzing a plan file, looking for ways in which it's inconsistent with project goals, look for ways in which it's ambiguous / self-contradictory, generate detailed recommendations about any suggested changes

DONE have a slash command that reviews tests (with $arguments) and looks for duplicated / overly verbose code that can be improved by using helper functions

DONE use new /test-quality command

DONE count_function_calls() docstring is too brief - any others?

DONE add github action that runs pre-commit hooks on whole codebase

DONE figure out what to work on next!! probably the method call attribution bug, plan in pending/ dir!!

DONE read https://github.com/anthropics/claude-code-action?tab=readme-ov-file#-solutions--use-cases

===

9/13

NVM give claude.yml ability to run tests, right?
    oh i already did :)

DONE refactor dockerfile

ok i'm trying to actually understand how the ast module works

https://docs.python.org/3/library/ast.html#ast-helpers

i'm also having claude write up a doc in docs/guides/

https://docs.python.org/3/library/ast.html#ast.NodeVisitor

DONE add much more detailed docstrings to class, methods, and module of parser

DONE some kind of doc explaining what the current features / limitations are, etc?

===

9/14

TODO read ast guide doc

TODO someday investigate serena

DONE context7?

DONE try sequential thinking

TODO experiment more with suggesting that claude use subagents -- both for parallelism and for context efficiency

TODO investigate tdd guard

TODO figure out what to do about the unresolvable calls prereq. turn it into a project that we do first before continuing with scope work?

NOTE: when picking up the stuff in the appendixes (or really any of these plans), treat the code snippets as POTENTIAL STARTING POINTS FOR IDEATION, not actual cut-and-dry patterns that we definitely have to follow.

i really feel like TODO there's going to have to be some intermediate stage where i turn this high-level plan doc into several smaller implementation docs that each get handled one at a time.

===

9/15

reading https://github.com/CaptainCrouton89/.claude

interesting https://github.com/CaptainCrouton89/.claude/blob/main/output-styles/main.md

lol this is bad advice "Extreme Conciseness: Respond in 1-4 lines maximum. Terminal interfaces demand brevityâ€”minimize tokens ruthlessly. Single word answers excel. Skip preambles, postambles, and explanations unless explicitly requested."

ok im not reading all this

ok reading https://github.com/jrheard/annotation_prioritizer/blob/main/docs/guides/ast-stdlib-module-guide.md

In [1]: import ast
   ...:
   ...: code = """
   ...: def regular_function(a: int, b=5, *args, **kwargs) -> str:
   ...:     '''A docstring'''
   ...:     return str(a + b)
   ...:
   ...: async def async_function(x: float) -> None:
   ...:     await some_operation(x)
   ...: """
   ...:
   ...: tree = ast.parse(code)

In [2]: print(tree)
<ast.Module object at 0xffff9cb91490>

In [3]: print(ast.dump(tree, indent=2))
Module(
  body=[
    FunctionDef(
      name='regular_function',
      args=arguments(
        args=[
          arg(
            arg='a',
            annotation=Name(id='int', ctx=Load())),
          arg(arg='b')],
        vararg=arg(arg='args'),
        kwarg=arg(arg='kwargs'),
        defaults=[
          Constant(value=5)]),
      body=[
        Expr(
          value=Constant(value='A docstring')),
        Return(
          value=Call(
            func=Name(id='str', ctx=Load()),
            args=[
              BinOp(
                left=Name(id='a', ctx=Load()),
                op=Add(),
                right=Name(id='b', ctx=Load()))]))],
      returns=Name(id='str', ctx=Load())),
    AsyncFunctionDef(
      name='async_function',
      args=arguments(
        args=[
          arg(
            arg='x',
            annotation=Name(id='float', ctx=Load()))]),
      body=[
        Expr(
          value=Await(
            value=Call(
              func=Name(id='some_operation', ctx=Load()),
              args=[
                Name(id='x', ctx=Load())])))],
      returns=Constant(value=None))])

having claude fill in these expanded parsed outputs for all of the examples

i think i'll also have it fill in the outputs of the nodevisitor examples

DONE have it rewrite this doc as a notebook???

TODO what about foo.bar.baz()?? look into that before starting work on the scoped plan

TODO what about super().foo()? not worth worrying about?

DONE split notebook into multiple smaller ones

DONE fix incorrect simple parentheses claim

===

9/16

TODO make the guide not mention scope-aware stuff, or the bug, etc

TODO add docs for the fields of each node type